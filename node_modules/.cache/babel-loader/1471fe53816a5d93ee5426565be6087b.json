{"remainingRequest":"/Users/suncc/Documents/HBuilderProjects/mall/node_modules/babel-loader/lib/index.js!/Users/suncc/Documents/HBuilderProjects/mall/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/suncc/Documents/HBuilderProjects/mall/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/suncc/Documents/HBuilderProjects/mall/src/components/goods/Params.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/suncc/Documents/HBuilderProjects/mall/src/components/goods/Params.vue","mtime":1611111552093},{"path":"/Users/suncc/Documents/HBuilderProjects/mall/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/suncc/Documents/HBuilderProjects/mall/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/suncc/Documents/HBuilderProjects/mall/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/suncc/Documents/HBuilderProjects/mall/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.string.trim\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/suncc/Documents/HBuilderProjects/mall/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      //商品分类列表\n      catelist: [],\n      //级联选择框的配置对象\n      cateProps: {\n        value: 'cat_id',\n        label: 'cat_name',\n        children: 'children'\n      },\n      //级联选择框双向绑定到的数组\n      selectedCateKeys: [],\n      //被激活的页签的名称\n      activeName: 'many',\n      //动态参数的数据\n      manyTableData: [],\n      //静态属性的数据\n      onlyTableData: [],\n      //控制添加对话框的显示与隐藏\n      addDialogVisible: false,\n      //添加参数的表单数据对象\n      addForm: {\n        attr_name: ''\n      },\n      //添加表单的验证规则对象\n      addFormRules: {\n        attr_name: [{\n          required: true,\n          message: '请输入参数名称',\n          trigger: 'blur'\n        }]\n      },\n      //控制修改对话框的显示与隐藏\n      editDialogVisible: false,\n      //修改的表单数据对象\n      editForm: {},\n      //修改表单的验证规则对象\n      editFormRules: {\n        attr_name: [{\n          required: true,\n          message: '请输入参数名称',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  created: function created() {\n    this.getCateList();\n  },\n  methods: {\n    //获取所有的商品分类列表\n    getCateList: function () {\n      var _getCateList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var _ref, res;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.$http.get('categories');\n\n              case 2:\n                _ref = _context.sent;\n                res = _ref.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.$message.error('获取商品分类失败！'));\n\n              case 6:\n                this.catelist = res.data;\n                console.log(this.catelist);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getCateList() {\n        return _getCateList.apply(this, arguments);\n      }\n\n      return getCateList;\n    }(),\n    //级联选择框选中项变化，会触发这个函数\n    handleChange: function handleChange() {\n      this.getParamsData();\n    },\n    //tab页签点击事件的处理函数\n    handleTabClick: function handleTabClick() {\n      console.log(this.activeName);\n      this.getParamsData();\n    },\n    //获取参数的列表数据\n    getParamsData: function () {\n      var _getParamsData = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _ref2, res;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.selectedCateKeys.length !== 3)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                this.selectedCateKeys = [];\n                this.manyTableData = [];\n                this.onlyTableData = [];\n                return _context2.abrupt(\"return\");\n\n              case 5:\n                //证明选中的是三级分类\n                console.log(this.selectedCateKeys); //根据所选分类的id,和当前所处的面板，获取对应的参数\n\n                _context2.next = 8;\n                return this.$http.get(\"categories/\".concat(this.cateId, \"/attributes\"), {\n                  params: {\n                    sel: this.activeName\n                  }\n                });\n\n              case 8:\n                _ref2 = _context2.sent;\n                res = _ref2.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this.$message.error('获取参数列表失败！'));\n\n              case 12:\n                res.data.forEach(function (item) {\n                  item.attr_vals = item.attr_vals ? item.attr_vals.split(' ') : [], //控制文本框的显示与隐藏\n                  item.inputVisible = false; //文本框中输入的值\n\n                  item.inputValue = '';\n                });\n                console.log(res.data);\n\n                if (this.activeName === 'many') {\n                  this.manyTableData = res.data;\n                } else {\n                  this.onlyTableData = res.data;\n                }\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getParamsData() {\n        return _getParamsData.apply(this, arguments);\n      }\n\n      return getParamsData;\n    }(),\n    //监听添加对话框的关闭事件\n    addDialogClosed: function addDialogClosed() {\n      this.$refs.addFormRef.resetFields();\n    },\n    //点击按钮，添加参数\n    addParams: function addParams() {\n      var _this = this;\n\n      this.$refs.addFormRef.validate(\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee3(valid) {\n          var _ref4, res;\n\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (valid) {\n                    _context3.next = 2;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\");\n\n                case 2:\n                  _context3.next = 4;\n                  return _this.$http.post(\"categories/\\n\\t\\t\\t\\t\".concat(_this.cateId, \"/attributes\"), {\n                    attr_name: _this.addForm.attr_name,\n                    attr_sel: _this.activeName\n                  });\n\n                case 4:\n                  _ref4 = _context3.sent;\n                  res = _ref4.data;\n\n                  if (!(res.meta.status !== 201)) {\n                    _context3.next = 8;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\", _this.$message.error('添加参数失败！'));\n\n                case 8:\n                  _this.$message.success('添加参数成功！');\n\n                  _this.addDialogVisible = false;\n\n                  _this.getParamsData();\n\n                case 11:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    },\n    //点击按钮，展示修改的对话框\n    showEditDialog: function () {\n      var _showEditDialog = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(attr_id) {\n        var _ref5, res;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.$http.get(\"categories/\".concat(this.cateId, \"/attributes/\").concat(attr_id), {\n                  params: {\n                    attr_sel: this.activeName\n                  }\n                });\n\n              case 2:\n                _ref5 = _context4.sent;\n                res = _ref5.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", this.$message.error('获取参数信息失败！'));\n\n              case 6:\n                this.editForm = res.data;\n                this.editDialogVisible = true;\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function showEditDialog(_x2) {\n        return _showEditDialog.apply(this, arguments);\n      }\n\n      return showEditDialog;\n    }(),\n    //重置修改的表单\n    editDialogClosed: function editDialogClosed() {\n      this.$refs.editFormRef.resetFields();\n    },\n    //点击按钮，修改参数信息\n    editParams: function editParams() {\n      var _this2 = this;\n\n      this.$refs.editFormRef.validate(\n      /*#__PURE__*/\n      function () {\n        var _ref6 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee5(valid) {\n          var _ref7, res;\n\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  if (valid) {\n                    _context5.next = 2;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\");\n\n                case 2:\n                  _context5.next = 4;\n                  return _this2.$http.put(\"categories/\".concat(_this2.cateId, \"/attributes/\").concat(_this2.editForm.attr_id), {\n                    attr_name: _this2.editForm.attr_name,\n                    attr_sel: _this2.activeName\n                  });\n\n                case 4:\n                  _ref7 = _context5.sent;\n                  res = _ref7.data;\n\n                  if (!(res.meta.status !== 200)) {\n                    _context5.next = 8;\n                    break;\n                  }\n\n                  return _context5.abrupt(\"return\", _this2.$message.error('修改参数失败！'));\n\n                case 8:\n                  _this2.$message.success('修改参数成功！');\n\n                  _this2.getParamsData();\n\n                  _this2.editDialogVisible = false;\n\n                case 11:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function (_x3) {\n          return _ref6.apply(this, arguments);\n        };\n      }());\n    },\n    //根据id删除对应的参数项\n    removeParams: function () {\n      var _removeParams = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(attr_id) {\n        var confirmResult, _ref8, res;\n\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.$confirm('此操作将永久删除该参数, 是否继续?', '提示', {\n                  confirmButtonText: '确定',\n                  cancelButtonText: '取消',\n                  type: 'warning'\n                }).catch(function (err) {\n                  return err;\n                });\n\n              case 2:\n                confirmResult = _context6.sent;\n\n                if (!(confirmResult !== 'confirm')) {\n                  _context6.next = 5;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", this.$message.info('已取消删除！'));\n\n              case 5:\n                _context6.next = 7;\n                return this.$http.delete(\"categories/\".concat(this.cateId, \"/attributes/\").concat(attr_id));\n\n              case 7:\n                _ref8 = _context6.sent;\n                res = _ref8.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", this.$message.error('删除参数失败！'));\n\n              case 11:\n                this.$message.success('删除参数成功！');\n                this.getParamsData();\n\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function removeParams(_x4) {\n        return _removeParams.apply(this, arguments);\n      }\n\n      return removeParams;\n    }(),\n    //文本框失去焦点或摁下了enter都会触发\n    handleInputConfirm: function () {\n      var _handleInputConfirm = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7(row) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(row.inputValue.trim().length === 0)) {\n                  _context7.next = 4;\n                  break;\n                }\n\n                row.inputValue = '';\n                row.inputVisible = false;\n                return _context7.abrupt(\"return\");\n\n              case 4:\n                //如果没有return，则证明输入的内容，需要做后续处理\n                row.attr_vals.push(row.inputValue.trim());\n                row.inputValue = '';\n                row.inputVisible = false; //需要发起请求，保存这次操作\n\n                this.saveAttrVals(row);\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function handleInputConfirm(_x5) {\n        return _handleInputConfirm.apply(this, arguments);\n      }\n\n      return handleInputConfirm;\n    }(),\n    //将对 attr_vals的操作，保存到数据库中\n    saveAttrVals: function () {\n      var _saveAttrVals = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee8(row) {\n        var _ref9, res;\n\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.$http.put(\"categories/\".concat(this.cateId, \"/attributes/\").concat(row.attr_id), {\n                  attr_name: row.attr_name,\n                  attr_sel: row.attr_sel,\n                  attr_vals: row.attr_vals.join(' ')\n                });\n\n              case 2:\n                _ref9 = _context8.sent;\n                res = _ref9.data;\n\n                if (!(res.meta.status !== 200)) {\n                  _context8.next = 6;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", this.$message.error('修改参数项失败！'));\n\n              case 6:\n                this.$message.success('修改参数项成功！');\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function saveAttrVals(_x6) {\n        return _saveAttrVals.apply(this, arguments);\n      }\n\n      return saveAttrVals;\n    }(),\n    //点击按钮，展示文本输入框\n    showInput: function showInput(row) {\n      var _this3 = this;\n\n      row.inputVisible = true; //让文本框自动获得焦点\n      //$nextTick方法的作用，就是当页面上元素被重新渲染之后，才会指定回调函数中的代码\n\n      this.$nextTick(function (_) {\n        _this3.$refs.saveTagInput.$refs.input.focus();\n      });\n    },\n    //删除对应的参数可选项\n    handleClose: function handleClose(i, row) {\n      row.attr_vals.splice(i, 1);\n      this.saveAttrVals(row);\n    }\n  },\n  computed: {\n    //如果按钮需要被禁用，则返回true,否则返回false\n    isBtnDisabled: function isBtnDisabled() {\n      if (this.selectedCateKeys.length !== 3) {\n        return true;\n      }\n\n      return false;\n    },\n    //当前选中的三级分类的id\n    cateId: function cateId() {\n      if (this.selectedCateKeys.length === 3) {\n        return this.selectedCateKeys[2];\n      }\n\n      return null;\n    },\n    //动态计算标题的文本\n    titleText: function titleText() {\n      if (this.activeName === 'many') {\n        return '动态参数';\n      }\n\n      return '静态属性';\n    }\n  }\n};",{"version":3,"sources":["Params.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\t<div>\n\t\t<!-- 面包屑导航区域 -->\n\t\t<el-breadcrumb separator-class=\"el-icon-arrow-right\">\n\t\t  <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\n\t\t  <el-breadcrumb-item>商品管理</el-breadcrumb-item>\n\t\t  <el-breadcrumb-item>参数列表</el-breadcrumb-item>\n\t\t</el-breadcrumb>\n\t\t\n\t\t<!-- 卡片视图区域 -->\n\t\t<el-card>\n\t\t\t<!-- 警告区域 -->\n\t\t\t<el-alert title=\"注意:只允许为第三级分类设置相关参数!\" type=\"warning\" :closable=\"false\" show-icon>\n\t\t\t  </el-alert>\n\t\t\t  \n\t\t\t  <!-- 选择商品分类区域 -->\n\t\t\t  <el-row class=\"cat_opt\">\n\t\t\t\t  <el-col>\n\t\t\t\t\t  <span>选择商品分类：</span>\n\t\t\t\t\t  <!-- 选择商品分类的级联选择框 -->\n\t\t\t\t\t   <el-cascader expand-trigger=\"hover\" v-model=\"selectedCateKeys\" :options=\"catelist\" \n\t\t\t\t\t   :props=\"cateProps\" @change=\"handleChange\"></el-cascader>\n\t\t\t\t  </el-col>\n\t\t\t  </el-row>\n\t\t\t  \n\t\t\t  <!-- tab 页签区域 -->\n\t\t\t   <el-tabs v-model=\"activeName\" @tab-click=\"handleTabClick\">\n\t\t\t\t   <!-- 添加动态参数的面板 -->\n\t\t\t      <el-tab-pane label=\"动态参数\" name=\"many\">\n\t\t\t\t\t  <!-- 添加参数的按钮 -->\n\t\t\t\t\t  <el-button type=\"primary\" size=\"mini\" :disabled=\"isBtnDisabled\"\n\t\t\t\t\t  @click=\"addDialogVisible = true\">添加参数</el-button>\n\t\t\t\t\t  <!-- 动态参数表格 -->\n\t\t\t\t\t  <el-table :data=\"manyTableData\" border stripe>\n\t\t\t\t\t\t  <!-- 展开行 -->\n\t\t\t\t\t\t   <el-table-column type=\"expand\">\n\t\t\t\t\t\t\t   <template slot-scope=\"scope\">\n\t\t\t\t\t\t\t\t   <!-- 循环渲染Tag标签 -->\n\t\t\t\t\t\t\t\t   <el-tag v-for=\"(item, i) in scope.row.attr_vals\"\n\t\t\t\t\t\t\t\t   :key=\"i\" closable @close=\"handleClose(i, scope.row)\">{{item}}</el-tag>\n\t\t\t\t\t\t\t\t   <!-- 输入文本框 -->\n\t\t\t\t\t\t\t\t   <el-input\n\t\t\t\t\t\t\t\t     class=\"input-new-tag\"\n\t\t\t\t\t\t\t\t     v-if=\"scope.row.inputVisible\"\n\t\t\t\t\t\t\t\t     v-model=\"scope.row.inputValue\"\n\t\t\t\t\t\t\t\t     ref=\"saveTagInput\"\n\t\t\t\t\t\t\t\t     size=\"small\"\n\t\t\t\t\t\t\t\t     @keyup.enter.native=\"handleInputConfirm(scope.row)\"\n\t\t\t\t\t\t\t\t     @blur=\"handleInputConfirm(scope.row)\"\n\t\t\t\t\t\t\t\t   >\n\t\t\t\t\t\t\t\t   </el-input>\n\t\t\t\t\t\t\t\t   <!-- 添加按钮 -->\n\t\t\t\t\t\t\t\t   <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">+ New Tag</el-button>\n\t\t\t\t\t\t\t   </template>\n\t\t\t\t\t\t   </el-table-column>\n\t\t\t\t\t\t  <!-- 索引列 -->\n\t\t\t\t\t\t  <el-table-column type=\"index\"></el-table-column>\n\t\t\t\t\t\t  <el-table-column label=\"参数名称\" prop=\"attr_name\"></el-table-column>\n\t\t\t\t\t\t  <el-table-column label=\"操作\">\n\t\t\t\t\t\t\t  <template slot-scope=\"scope\">\n\t\t\t\t\t\t\t\t  <el-button size=\"mini\" type=\"primary\" icon=\"el-icon-edit\" @click=\"showEditDialog(scope.row.attr_id)\">编辑</el-button>\n\t\t\t\t\t\t\t\t   <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\" @click=\"removeParams(scope.row.attr_id)\">删除</el-button>\n\t\t\t\t\t\t\t  </template>\n\t\t\t\t\t\t  </el-table-column>\n\t\t\t\t\t  </el-table>\n\t\t\t\t  </el-tab-pane>\n\t\t\t\t  <!-- 添加静态属性的面板 -->\n\t\t\t      <el-tab-pane label=\"静态属性\" name=\"only\">\n\t\t\t\t\t  <!-- 添加属性的按钮 -->\n\t\t\t\t\t    <el-button type=\"primary\" size=\"mini\" :disabled=\"isBtnDisabled\"\n\t\t\t\t\t\t@click=\"addDialogVisible = true\">添加属性</el-button>\n\t\t\t\t\t\t<!-- 静态属性表格 -->\n\t\t\t\t\t\t<el-table :data=\"onlyTableData\" border stripe>\n\t\t\t\t\t\t\t\t\t\t\t\t  <!-- 展开行 -->\n\t\t\t\t\t\t\t\t\t\t\t\t  <el-table-column type=\"expand\">\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t   <template slot-scope=\"scope\">\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t   <!-- 循环渲染Tag标签 -->\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t   <el-tag v-for=\"(item, i) in scope.row.attr_vals\"\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t   :key=\"i\" closable @close=\"handleClose(i, scope.row)\">{{item}}</el-tag>\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t   <!-- 输入文本框 -->\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t   <el-input\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t     class=\"input-new-tag\"\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t     v-if=\"scope.row.inputVisible\"\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t     v-model=\"scope.row.inputValue\"\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t     ref=\"saveTagInput\"\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t     size=\"small\"\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t     @keyup.enter.native=\"handleInputConfirm(scope.row)\"\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t     @blur=\"handleInputConfirm(scope.row)\"\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t   >\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t   </el-input>\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t   <!-- 添加按钮 -->\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t   <el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput(scope.row)\">+ New Tag</el-button>\n\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t   </template>\n\t\t\t\t\t\t\t\t\t\t\t\t  </el-table-column>\n\t\t\t\t\t\t\t\t\t\t\t\t  <!-- 索引列 -->\n\t\t\t\t\t\t\t\t\t\t\t\t  <el-table-column type=\"index\"></el-table-column>\n\t\t\t\t\t\t\t\t\t\t\t\t  <el-table-column label=\"属性名称\" prop=\"attr_name\"></el-table-column>\n\t\t\t\t\t\t\t\t\t\t\t\t  <el-table-column label=\"操作\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t  <template slot-scope=\"scope\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  <el-button size=\"mini\" type=\"primary\" icon=\"el-icon-edit\" @click=\"showEditDialog(scope.row.attr_id)\">编辑</el-button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t   <el-button size=\"mini\" type=\"danger\" icon=\"el-icon-delete\" @click=\"removeParams(scope.row.attr_id)\">删除</el-button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t  </template>\n\t\t\t\t\t\t\t\t\t\t\t\t  </el-table-column>\n\t\t\t\t\t\t</el-table>\n\t\t\t\t  </el-tab-pane>\n\t\t\t    </el-tabs>\n\t\t</el-card>\n\t\t\n\t\t<!-- 添加参数的对话框 -->\n\t\t<el-dialog :title=\"'添加' + titleText\" :visible.sync=\"addDialogVisible\"\n\t\t width=\"50%\" @close=\"addDialogClosed\">\n\t\t  <el-form :model=\"addForm\" :rules=\"addFormRules\" ref=\"addFormRef\" label-width=\"100px\">\n\t\t    <el-form-item :label=\"titleText\" prop=\"attr_name\">\n\t\t      <el-input v-model=\"addForm.attr_name\"></el-input>\n\t\t    </el-form-item>\n\t\t\t</el-form>\n\t\t  <span slot=\"footer\" class=\"dialog-footer\">\n\t\t    <el-button @click=\"addDialogVisible = false\">取 消</el-button>\n\t\t    <el-button type=\"primary\" @click=\"addParams\">确 定</el-button>\n\t\t  </span>\n\t\t</el-dialog>\n\t\t\n\t\t<!-- 修改参数的对话框 -->\n\t\t<el-dialog :title=\"'修改' + titleText\" :visible.sync=\"editDialogVisible\"\n\t\t width=\"50%\" @close=\"editDialogClosed\">\n\t\t  <el-form :model=\"editForm\" :rules=\"editFormRules\" ref=\"editFormRef\" label-width=\"100px\">\n\t\t    <el-form-item :label=\"titleText\" prop=\"attr_name\">\n\t\t      <el-input v-model=\"editForm.attr_name\"></el-input>\n\t\t    </el-form-item>\n\t\t\t</el-form>\n\t\t  <span slot=\"footer\" class=\"dialog-footer\">\n\t\t    <el-button @click=\"editDialogVisible = false\">取 消</el-button>\n\t\t    <el-button type=\"primary\" @click=\"editParams\">确 定</el-button>\n\t\t  </span>\n\t\t</el-dialog>\n\t</div>\n</template>\n\n<script>\nexport default {\n\tdata(){\n\t\treturn {\n\t\t\t//商品分类列表\n\t\t\tcatelist: [],\n\t\t\t//级联选择框的配置对象\n\t\t\tcateProps: {\n\t\t\t\tvalue: 'cat_id',\n\t\t\t\tlabel: 'cat_name',\n\t\t\t\tchildren: 'children'\n\t\t\t},\n\t\t\t//级联选择框双向绑定到的数组\n\t\t\tselectedCateKeys: [],\n\t\t\t//被激活的页签的名称\n\t\t\tactiveName: 'many',\n\t\t\t//动态参数的数据\n\t\t\tmanyTableData: [],\n\t\t\t//静态属性的数据\n\t\t\tonlyTableData: [],\n\t\t\t//控制添加对话框的显示与隐藏\n\t\t\taddDialogVisible: false,\n\t\t\t//添加参数的表单数据对象\n\t\t\taddForm: {\n\t\t\t\tattr_name: ''\n\t\t\t},\n\t\t\t//添加表单的验证规则对象\n\t\t\taddFormRules: {\n\t\t\t\tattr_name:[\n\t\t\t\t\t{ required: true, message: '请输入参数名称', trigger: 'blur'}\n\t\t\t\t]\n\t\t\t},\n\t\t\t//控制修改对话框的显示与隐藏\n\t\t\teditDialogVisible: false,\n\t\t\t//修改的表单数据对象\n\t\t\teditForm: {},\n\t\t\t//修改表单的验证规则对象\n\t\t\teditFormRules:{\n\t\t\t\tattr_name:[\n\t\t\t\t\t{ required: true, message: '请输入参数名称', trigger: 'blur'}\n\t\t\t\t]\n\t\t\t}\n\t\t\t\n\t\t}\n\t},\n\tcreated() {\n\t\tthis.getCateList()\n\t},\n\tmethods: {\n\t\t//获取所有的商品分类列表\n\t\tasync getCateList(){\n\t\t\tconst {data: res} = await this.$http.get('categories')\n\t\t\tif(res.meta.status !== 200){\n\t\t\t\treturn this.$message.error('获取商品分类失败！')\n\t\t\t}\n\t\t\t\n\t\t\tthis.catelist = res.data\n\t\t\t\n\t\t\tconsole.log(this.catelist)\n\t\t},\n\t\t//级联选择框选中项变化，会触发这个函数\n\t\thandleChange(){\n\t\t\tthis.getParamsData()\n\t\t},\n\t\t//tab页签点击事件的处理函数\n\t\thandleTabClick(){\n\t\t\tconsole.log(this.activeName)\n\t\t\tthis.getParamsData()\n\t\t},\n\t\t//获取参数的列表数据\n\t\tasync getParamsData() {\n\t\t\t//证明选中的不是三级分类\n\t\t\tif(this.selectedCateKeys.length !== 3){\n\t\t\t\tthis.selectedCateKeys = []\n\t\t\t\tthis.manyTableData = []\n\t\t\t\tthis.onlyTableData = []\n\t\t\t\treturn\n\t\t\t}\n\t\t\t\n\t\t\t//证明选中的是三级分类\n\t\t\tconsole.log(this.selectedCateKeys)\n\t\t\t//根据所选分类的id,和当前所处的面板，获取对应的参数\n\t\t\tconst {data: res} = await this.$http.get(`categories/${this.cateId}/attributes`,\n\t\t\t{params: {sel: this.activeName}})\n\t\t\t\n\t\t\tif(res.meta.status !== 200){\n\t\t\t\treturn this.$message.error('获取参数列表失败！')\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tres.data.forEach(item => {\n\t\t\t\titem.attr_vals = item.attr_vals ? item.attr_vals.split(' ') : [],\n\t\t\t\t//控制文本框的显示与隐藏\n\t\t\t\titem.inputVisible = false\n\t\t\t\t//文本框中输入的值\n\t\t\t\titem.inputValue = ''\n\t\t\t})\n\t\t\tconsole.log(res.data)\n\t\t\tif(this.activeName === 'many'){\n\t\t\t\tthis.manyTableData = res.data\n\t\t\t}else {\n\t\t\t\tthis.onlyTableData = res.data\n\t\t\t}\n\t\t},\n\t\t//监听添加对话框的关闭事件\n\t\taddDialogClosed() {\n\t\t\tthis.$refs.addFormRef.resetFields()\n\t\t},\n\t\t//点击按钮，添加参数\n\t\taddParams(){\n\t\t\tthis.$refs.addFormRef.validate(async valid => {\n\t\t\t\tif(!valid) return\n\t\t\t\tconst {data: res} = await this.$http.post(`categories/\n\t\t\t\t${this.cateId}/attributes`, { attr_name: this.addForm.attr_name,\n\t\t\t\tattr_sel: this.activeName })\n\t\t\t\t\n\t\t\t\tif(res.meta.status !== 201){\n\t\t\t\t\treturn this.$message.error('添加参数失败！')\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.$message.success('添加参数成功！')\n\t\t\t\tthis.addDialogVisible = false\n\t\t\t\tthis.getParamsData()\n\t\t\t})\n\t\t},\n\t//点击按钮，展示修改的对话框\n\tasync showEditDialog(attr_id){\n\t\t//查询当前参数的信息\n\t\tconst {data: res} = await this.$http.get(`categories/${this.cateId}/attributes/${attr_id}`,\n\t\t{ params: {attr_sel: this.activeName }})\n\t\t\n\t\tif(res.meta.status !== 200){\n\t\t\treturn this.$message.error('获取参数信息失败！')\n\t\t}\n\t\tthis.editForm = res.data\n\t\tthis.editDialogVisible = true\n\t},\n\t//重置修改的表单\n\teditDialogClosed(){\n\t\tthis.$refs.editFormRef.resetFields()\n\t},\n\t//点击按钮，修改参数信息\n\teditParams(){\n\t\tthis.$refs.editFormRef.validate(async valid => {\n\t\t\tif(!valid) return\n\t\t\tconst {data: res} = await this.$http.put(`categories/${this.cateId}/attributes/${this.editForm.attr_id}`,\n\t\t\t{ attr_name: this.editForm.attr_name, attr_sel: this.activeName })\n\t\t\t\n\t\t\tif(res.meta.status !== 200){\n\t\t\t\treturn this.$message.error('修改参数失败！')\n\t\t\t}\n\t\t\t\n\t\t\tthis.$message.success('修改参数成功！')\n\t\t\tthis.getParamsData()\n\t\t\tthis.editDialogVisible = false\n\t\t})\n\t},\n\t//根据id删除对应的参数项\n\tasync removeParams(attr_id){\n\t\tconst confirmResult = await this.$confirm('此操作将永久删除该参数, 是否继续?', '提示', {\n\t\t          confirmButtonText: '确定',\n\t\t          cancelButtonText: '取消',\n\t\t          type: 'warning'\n\t\t        }).catch(err => err)\n\t\t\t\t\n\t\t\t\t//用户取消了删除的操作\n\t\t\t\tif(confirmResult !== 'confirm'){\n\t\t\t\t\treturn this.$message.info('已取消删除！')\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t//删除的业务逻辑\n\t\t\t\tconst {data: res} = await this.$http.delete(`categories/${this.cateId}/attributes/${attr_id}`)\n\t\t\t\t\n\t\t\t\tif(res.meta.status !== 200){\n\t\t\t\t\treturn this.$message.error('删除参数失败！')\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tthis.$message.success('删除参数成功！')\n\t\t\t\tthis.getParamsData()\n\t},\n\t//文本框失去焦点或摁下了enter都会触发\n\tasync handleInputConfirm(row){\n\t\tif(row.inputValue.trim().length === 0){\n\t\t\trow.inputValue = ''\n\t\t\trow.inputVisible = false\n\t\t\treturn\n\t\t}\n\t\t//如果没有return，则证明输入的内容，需要做后续处理\n\t\trow.attr_vals.push(row.inputValue.trim())\n\t\trow.inputValue = ''\n\t\trow.inputVisible = false\n\t\t//需要发起请求，保存这次操作\n\t\tthis.saveAttrVals(row)\n\t},\n\t//将对 attr_vals的操作，保存到数据库中\n\tasync saveAttrVals(row){\n\t\t//需要发起请求，保存这次操作\n\t\tconst {data: res} = await this.$http.put(`categories/${this.cateId}/attributes/${row.attr_id}`,\n\t\t{ attr_name: row.attr_name, attr_sel: row.attr_sel, attr_vals: row.attr_vals.join(' ')})\n\t\t\n\t\tif(res.meta.status !== 200){\n\t\t\treturn this.$message.error('修改参数项失败！')\n\t\t}\n\t\t\n\t\tthis.$message.success('修改参数项成功！')\n\t},\n\t//点击按钮，展示文本输入框\n\tshowInput(row){\n\t\trow.inputVisible = true\n\t\t//让文本框自动获得焦点\n\t\t//$nextTick方法的作用，就是当页面上元素被重新渲染之后，才会指定回调函数中的代码\n\t\t this.$nextTick(_ => {\n\t\t          this.$refs.saveTagInput.$refs.input.focus();\n\t\t        });\n\t},\n\t//删除对应的参数可选项\n\thandleClose(i, row){\n\t\trow.attr_vals.splice(i, 1)\n\t\tthis.saveAttrVals(row)\n\t}\n\t\t\n\t},\n\tcomputed: {\n\t\t//如果按钮需要被禁用，则返回true,否则返回false\n\t\tisBtnDisabled(){\n\t\t\tif(this.selectedCateKeys.length !== 3){\n\t\t\t\treturn true\n\t\t\t}\n\t\t\treturn false\n\t\t},\n\t\t//当前选中的三级分类的id\n\t\tcateId(){\n\t\t\tif(this.selectedCateKeys.length === 3){\n\t\t\t\treturn this.selectedCateKeys[2]\n\t\t\t}\n\t\t\treturn null\n\t\t},\n\t\t//动态计算标题的文本\n\t\ttitleText(){\n\t\t\tif(this.activeName === 'many'){\n\t\t\t\treturn '动态参数'\n\t\t\t}\n\t\t\treturn '静态属性'\n\t\t}\n\t}\n\t\n}\n</script>\n\n<style lang=\"less\" scoped>\n\t.cat_opt{\n\t\tmargin: 15px 0;\n\t}\n\t.el-tag{\n\t\tmargin: 10px;\n\t}\n\t.input-new-tag{\n\t\twidth: 120px;\n\t}\n</style>\n"],"sourceRoot":"src/components/goods"}]}